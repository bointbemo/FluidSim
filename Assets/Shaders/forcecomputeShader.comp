#version 440

#define WORK_GROUP_SIZE 7200
#define NUM_PARTICLES 7200
#define PARTICLE_RADIUS 0.1f
// constants


#define PI 3.1415927410125732421875f

#define PARTICLE_DENSITY_START 1000
#define PARTICLE_VISCOSITY 1000
#define PARTICLE_MASS 100
#define SMOOTHING_LENGTH (6 * PARTICLE_RADIUS)
#define GRAVITY vec4(0, -981,0,0)

#define PARTICLE_STIFFNESS 2000
// For calculations


layout (local_size_x = 32, local_size_y = 1, local_size_z = 1) in;

struct Particle
{
 	        float x; //position
			float y;
			float z;
			float empty;
			
			float velocityx;//velocity
			float velocityy;
			float velocityz;
			float vempty;
			
			float forcex;//force
			float forcey;
			float forcez;
			float fempty;
			
			float density;//density
			float dempty;
			
			float pressure;//presure
			float pempty;
    
};

layout(std430, binding = 1) buffer PARTICLES
{
Particle particles[];
};



const float GAS_CONST = 2000.0f; // const for equation of state



void main()
{
    uint i = gl_GlobalInvocationID.x;  
    // compute all forces
    vec3 pressure_force = vec3(0, 0,0);
    vec3 viscosity_force = vec3(0, 0,0);
     vec3 delta = vec3(0,0,0);
     vec4 external_force = vec4(0,0,0,0);
     float r = 0.0f;
     
    for ( int j = 0; j < NUM_PARTICLES; j++)
    {
        if(particles[j].density==0){particles[j].density = 100;};
        if(particles[i].density==0){particles[i].density = 100;};
        if (i == j)
        {
            continue;
        }
        delta = vec3(particles[i].x,particles[i].y,particles[i].z)-vec3(particles[j].x, particles[j].y, particles[j].z);
         r = length(delta);
        if (r < SMOOTHING_LENGTH)
        {
            pressure_force -= PARTICLE_MASS * (particles[i].pressure + particles[j].pressure) / (2.f * particles[j].density) *
            // gradient of spiky kernel from muller et al 2003
                 -((15/(PI*pow(SMOOTHING_LENGTH,6)) *pow(SMOOTHING_LENGTH-r, 3))) ;
            
            
            viscosity_force += PARTICLE_MASS * (vec3(particles[j].velocityx,particles[j].velocityy,particles[j].velocityz) - vec3(particles[i].velocityx,particles[i].velocityy,particles[i].velocityz)) / particles[j].density *
            // Laplacian of viscosity kernel from muller et al 2003
                45.f / (PI * pow(SMOOTHING_LENGTH, 6)) * (SMOOTHING_LENGTH - r);
        }
    }
    viscosity_force *= PARTICLE_VISCOSITY;

    external_force = particles[i].density* GRAVITY;

    particles[i].forcex = pressure_force.x + viscosity_force.x + external_force.x;
    particles[i].forcey = pressure_force.y + viscosity_force.y + external_force.y;
    particles[i].forcez = pressure_force.z + viscosity_force.z + external_force.z;
}
