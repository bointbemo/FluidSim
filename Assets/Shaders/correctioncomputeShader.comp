#version 440

#define WORK_GROUP_SIZE 7200
#define NUM_PARTICLES 7200
#define PARTICLE_RADIUS 0.1
#define PARTICLE_MASS = 0.7
// For calculations
#define PI 3.141592741f
#define SMOOTHING_LENGTH (0.158460189)
#define relaxation_factor 1.0f
#define TIME_STEP 0.001f
#define WALL_DAMPING 0.3f
layout (local_size_x = 32, local_size_y = 1, local_size_z = 1) in;

struct Particle
{
 	     float x; //position
			float y;
			float z;
			
			
			float velocityx;//velocity
			float velocityy;
			float velocityz;
		
			float forcex;//force
			float forcey;
			float forcez;
			
			
			float density;//density
			float dempty;
			
			float pressure;//presure
			float pempty; //llambda

			float correction_forcex;
			float correction_forcey;
			float correction_forcez;
    
};

layout(std430, binding = 1) buffer PARTICLES
{
Particle particles[];
};



const float GAS_CONST = 2.0f; // const for equation of state

void main()
{
    uint i = gl_GlobalInvocationID.x;

    vec4 position = vec4(particles[i].x,particles[i].y,particles[i].z,0);
    vec4 postionupdate = vec4(0,0,0,0);
    vec3 pressure_force = vec3(0, 0,0);
    vec3 viscosity_force = vec3(0, 0,0);
     vec3 delta = vec3(0,0,0);
     vec4 external_force = vec4(0,0,0,0);
     float r = 0.0f;
     float correctiongradient = 0;
     float correctiongradienttotal = 0;
     float llambda = 0;
     vec3 deltakernal = vec3(0,0,0);
     float rkernal = 0;

    for ( int j = 0; j < NUM_PARTICLES; j++)
    {
        if (i == j)
        {
            continue;
        }
        delta = vec3(particles[j].x,particles[j].y,particles[j].z)-vec3(particles[i].x, particles[i].y, particles[i].z);

         r = length(delta);

        if (r < SMOOTHING_LENGTH)// if particle is neighbour

        {
              
                 deltakernal = vec3(particles[j].x,particles[j].y,particles[j].z)-vec3(particles[i].x, particles[i].y, particles[i].z);
                 rkernal = length(deltakernal);
               correctiongradient +=  ((15/(PI*pow(SMOOTHING_LENGTH,6)) *pow(SMOOTHING_LENGTH-rkernal, 3))) ;
            
     
             }
 
        
        if(r>SMOOTHING_LENGTH){
           correctiongradient = -((15/(PI*pow(SMOOTHING_LENGTH,6)) *pow(SMOOTHING_LENGTH-rkernal, 3))) ;
        }
        
        }
        if(particles[i].density==0){particles[i].density = 1;};
        correctiongradienttotal = pow(correctiongradient,2);

        llambda =- ((particles[i].density/1000)-1)/(correctiongradienttotal+relaxation_factor);
        particles[i].pempty = llambda;
}



