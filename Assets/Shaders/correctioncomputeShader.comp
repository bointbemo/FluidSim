#version 440

#define WORK_GROUP_SIZE 7200
#define NUM_PARTICLES 7200
#define PARTICLE_RADIUS 5.0f

// For calculations
#define PI 3.141592741f


#define TIME_STEP 0.001f
#define WALL_DAMPING 0.3f
layout (local_size_x = 32, local_size_y = 1, local_size_z = 1) in;

struct Particle
{
 	        float x; //position
			float y;
			float z;
			float empty;
			
			float velocityx;//velocity
			float velocityy;
			float velocityz;
			float vempty;
			
			float forcex;//force
			float forcey;
			float forcez;
			float fempty;
			
			float density;//density
			float dempty;
			
			float pressure;//presure
			float pempty;
    
};

layout(std430, binding = 1) buffer PARTICLES
{
Particle particles[];
};



const float GAS_CONST = 2.0f; // const for equation of state

void main()
{
{
    uint i = gl_GlobalInvocationID.x;

    // integrate
    if(particles[i].density==0){particles[i].density = 100;};
    if(particles[i].density>1000){particles[i].density =1000;};
    vec4 acceleration = vec4(particles[i].forcex,particles[i].forcey,particles[i].forcez,0) / particles[i].density;
    vec4 new_velocity = vec4(particles[i].velocityx,particles[i].velocityy,particles[i].velocityz,0)+ TIME_STEP * acceleration;
    vec4 new_position = vec4(particles[i].x,particles[i].y,particles[i].z,0) + TIME_STEP * new_velocity;

    // boundary conditions
    if (new_position.x < -10)
    {
        new_position.x = -10;
        new_velocity.x *= -1 *WALL_DAMPING;
    }
    else if (new_position.x > 10)
    {
        new_position.x = 10;
        new_velocity.x *= -1 *WALL_DAMPING;
    }
     if (new_position.y < -10)
    {
        new_position.y = -10;
        new_velocity.y *= -1* WALL_DAMPING;
    }
    else if (new_position.y >15)
    {
        new_position.y = 15;
        new_velocity.y *= -1 * WALL_DAMPING;
    }
       if (new_position.z < -10)
    {
        new_position.z = -10;
        new_velocity.z *= -1 * WALL_DAMPING;
    }
    else if (new_position.z > 5)
    {
        new_position.z = 5;
        new_velocity.z *= -1 * WALL_DAMPING;
    }


    particles[i].velocityx = new_velocity.x;
    particles[i].velocityy = new_velocity.y;
    particles[i].velocityz = new_velocity.z;
    particles[i].x = new_position.x;
    particles[i].y = new_position.y;
    particles[i].z=  new_position.z;
}
}